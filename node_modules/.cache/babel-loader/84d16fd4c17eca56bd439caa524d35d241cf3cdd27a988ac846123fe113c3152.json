{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hall_\\\\Desktop\\\\Bid\\\\frontend\\\\src\\\\components\\\\DashboardApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport { useData } from '../services/DataContext';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend, RadialLinearScale } from 'chart.js';\nimport { Line, Bar, Pie, Doughnut } from 'react-chartjs-2';\n\n// Register ChartJS components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, RadialLinearScale, Title, Tooltip, Legend);\nconst DashboardApp = () => {\n  _s();\n  const {\n    data\n  } = useData();\n  const [filters, setFilters] = useState({\n    endYear: 'all',\n    topic: 'all',\n    sector: 'all',\n    region: 'all',\n    pest: 'all',\n    source: 'all',\n    swot: 'all',\n    country: 'all',\n    city: 'all'\n  });\n  const [resetFilters, setResetFilters] = useState(false);\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top'\n      }\n    }\n  };\n\n  // Process and filter data\n  const processedData = useMemo(() => {\n    return data.filter(item => {\n      return (filters.endYear === 'all' || item.end_year === parseInt(filters.endYear)) && (filters.topic === 'all' || item.topic === filters.topic) && (filters.sector === 'all' || item.sector === filters.sector) && (filters.region === 'all' || item.region === filters.region) && (filters.pest === 'all' || item.pestle === filters.pest) && (filters.source === 'all' || item.source === filters.source) && (filters.swot === 'all' || item.swot === filters.swot) && (filters.country === 'all' || item.country === filters.country) && (filters.city === 'all' || item.city === filters.city);\n    });\n  }, [data, filters]);\n\n  // Enhanced data aggregation\n  const chartData = useMemo(() => {\n    const regionCount = {};\n    const topicCount = {};\n    const yearlyMetrics = {};\n    const sectorData = {};\n    const countryData = {};\n    const cityData = {};\n    const swotData = {};\n    processedData.forEach(item => {\n      // Region counting\n      if (item.region) {\n        regionCount[item.region] = (regionCount[item.region] || 0) + 1;\n      }\n\n      // Topic counting\n      if (item.topic) {\n        topicCount[item.topic] = (topicCount[item.topic] || 0) + 1;\n      }\n\n      // Country counting\n      if (item.country) {\n        countryData[item.country] = (countryData[item.country] || 0) + 1;\n      }\n\n      // City counting - Ensure city data is being counted\n      if (item.city && item.city !== \"\") {\n        cityData[item.city] = (cityData[item.city] || 0) + 1;\n      }\n\n      // Sector counting\n      if (item.sector) {\n        sectorData[item.sector] = (sectorData[item.sector] || 0) + 1;\n      }\n\n      // SWOT counting - Ensure SWOT data is being counted\n      if (item.swot && item.swot !== \"\") {\n        swotData[item.swot] = (swotData[item.swot] || 0) + 1;\n      }\n\n      // Yearly metrics\n      if (item.end_year) {\n        if (!yearlyMetrics[item.end_year]) {\n          yearlyMetrics[item.end_year] = {\n            intensity: {\n              sum: 0,\n              count: 0\n            },\n            likelihood: {\n              sum: 0,\n              count: 0\n            },\n            relevance: {\n              sum: 0,\n              count: 0\n            }\n          };\n        }\n        if (item.intensity) {\n          yearlyMetrics[item.end_year].intensity.sum += item.intensity;\n          yearlyMetrics[item.end_year].intensity.count += 1;\n        }\n        if (item.likelihood) {\n          yearlyMetrics[item.end_year].likelihood.sum += item.likelihood;\n          yearlyMetrics[item.end_year].likelihood.count += 1;\n        }\n        if (item.relevance) {\n          yearlyMetrics[item.end_year].relevance.sum += item.relevance;\n          yearlyMetrics[item.end_year].relevance.count += 1;\n        }\n      }\n    });\n\n    // Calculate averages for yearly metrics\n    const years = Object.keys(yearlyMetrics).sort();\n    const yearlyData = {\n      intensity: years.map(year => yearlyMetrics[year].intensity.count > 0 ? yearlyMetrics[year].intensity.sum / yearlyMetrics[year].intensity.count : 0),\n      likelihood: years.map(year => yearlyMetrics[year].likelihood.count > 0 ? yearlyMetrics[year].likelihood.sum / yearlyMetrics[year].likelihood.count : 0),\n      relevance: years.map(year => yearlyMetrics[year].relevance.count > 0 ? yearlyMetrics[year].relevance.sum / yearlyMetrics[year].relevance.count : 0)\n    };\n    return {\n      metricsOverTime: {\n        labels: years,\n        datasets: [{\n          label: 'Intensity',\n          data: yearlyData.intensity,\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1\n        }, {\n          label: 'Likelihood',\n          data: yearlyData.likelihood,\n          borderColor: 'rgb(255, 99, 132)',\n          tension: 0.1\n        }, {\n          label: 'Relevance',\n          data: yearlyData.relevance,\n          borderColor: 'rgb(153, 102, 255)',\n          tension: 0.1\n        }]\n      },\n      regionChart: {\n        labels: Object.keys(regionCount),\n        datasets: [{\n          data: Object.values(regionCount),\n          backgroundColor: ['rgba(255, 99, 132, 0.8)', 'rgba(54, 162, 235, 0.8)', 'rgba(255, 206, 86, 0.8)', 'rgba(75, 192, 192, 0.8)', 'rgba(153, 102, 255, 0.8)']\n        }]\n      },\n      topicChart: {\n        labels: Object.keys(topicCount),\n        datasets: [{\n          label: 'Topics Distribution',\n          data: Object.values(topicCount),\n          backgroundColor: 'rgba(54, 162, 235, 0.8)'\n        }]\n      },\n      countryChart: {\n        labels: Object.entries(countryData).sort((a, b) => b[1] - a[1]).slice(0, 10).map(([country]) => country),\n        datasets: [{\n          label: 'Top 10 Countries',\n          data: Object.entries(countryData).sort((a, b) => b[1] - a[1]).slice(0, 10).map(([, count]) => count),\n          backgroundColor: 'rgba(153, 102, 255, 0.8)'\n        }]\n      },\n      cityChart: {\n        labels: Object.entries(cityData).sort((a, b) => b[1] - a[1]).slice(0, 10).map(([city]) => city),\n        datasets: [{\n          label: 'Top 10 Cities',\n          data: Object.entries(cityData).sort((a, b) => b[1] - a[1]).slice(0, 10).map(([, count]) => count),\n          backgroundColor: 'rgba(255, 159, 64, 0.8)'\n        }]\n      },\n      sectorChart: {\n        labels: Object.keys(sectorData),\n        datasets: [{\n          data: Object.values(sectorData),\n          backgroundColor: ['rgba(255, 99, 132, 0.8)', 'rgba(54, 162, 235, 0.8)', 'rgba(255, 206, 86, 0.8)', 'rgba(75, 192, 192, 0.8)', 'rgba(153, 102, 255, 0.8)']\n        }]\n      },\n      swotChart: {\n        labels: Object.keys(swotData),\n        datasets: [{\n          label: 'SWOT Analysis',\n          data: Object.values(swotData),\n          backgroundColor: ['rgba(75, 192, 192, 0.8)', 'rgba(255, 99, 132, 0.8)', 'rgba(255, 206, 86, 0.8)', 'rgba(153, 102, 255, 0.8)']\n        }]\n      }\n    };\n  }, [processedData]);\n\n  // Filter options\n  const filterOptions = useMemo(() => ({\n    endYear: [...new Set(data.map(item => item.end_year))].filter(Boolean).sort(),\n    topic: [...new Set(data.map(item => item.topic))].filter(Boolean).sort(),\n    sector: [...new Set(data.map(item => item.sector))].filter(Boolean).sort(),\n    region: [...new Set(data.map(item => item.region))].filter(Boolean).sort(),\n    pest: [...new Set(data.map(item => item.pestle))].filter(Boolean).sort(),\n    source: [...new Set(data.map(item => item.source))].filter(Boolean).sort(),\n    swot: [...new Set(data.map(item => item.swot))].filter(Boolean).sort(),\n    country: [...new Set(data.map(item => item.country))].filter(Boolean).sort(),\n    city: [...new Set(data.map(item => item.city))].filter(Boolean).sort()\n  }), [data]);\n  const handleFilterChange = (filterKey, value) => {\n    setFilters(prevFilters => ({\n      ...prevFilters,\n      [filterKey]: value\n    }));\n  };\n  const handleResetFilters = () => {\n    setFilters({\n      endYear: 'all',\n      topic: 'all',\n      sector: 'all',\n      region: 'all',\n      pest: 'all',\n      source: 'all',\n      swot: 'all',\n      country: 'all',\n      city: 'all'\n    });\n    setResetFilters(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4 space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters flex flex-wrap gap-2\",\n      children: [Object.keys(filterOptions).map((filterKey, index) => /*#__PURE__*/_jsxDEV(\"select\", {\n        value: filters[filterKey],\n        onChange: e => handleFilterChange(filterKey, e.target.value),\n        className: \"border border-gray-300 rounded p-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"all\",\n          children: [\"All \", filterKey.charAt(0).toUpperCase() + filterKey.slice(1)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this), filterOptions[filterKey].map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option,\n          children: option\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 15\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleResetFilters,\n        className: \"px-4 py-2 bg-blue-500 text-white rounded\",\n        children: \"Reset Filters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"charts grid grid-cols-1 md:grid-cols-2 gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-center font-semibold\",\n          children: \"Yearly Metrics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          options: options,\n          data: chartData.metricsOverTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-center font-semibold\",\n          children: \"Region Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Doughnut, {\n          options: options,\n          data: chartData.regionChart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-center font-semibold\",\n          children: \"Topic Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          options: options,\n          data: chartData.topicChart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-center font-semibold\",\n          children: \"Top 10 Countries\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Pie, {\n          options: options,\n          data: chartData.countryChart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-center font-semibold\",\n          children: \"Top 10 Cities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Pie, {\n          options: options,\n          data: chartData.cityChart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-center font-semibold\",\n          children: \"Sector Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          options: options,\n          data: chartData.sectorChart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-center font-semibold\",\n          children: \"SWOT Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Doughnut, {\n          options: options,\n          data: chartData.swotChart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 5\n  }, this);\n};\n_s(DashboardApp, \"hZtR5meavLVZO9WPt7o3B7SD+48=\", false, function () {\n  return [useData];\n});\n_c = DashboardApp;\nexport default DashboardApp;\nvar _c;\n$RefreshReg$(_c, \"DashboardApp\");","map":{"version":3,"names":["React","useState","useMemo","useData","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","RadialLinearScale","Line","Bar","Pie","Doughnut","jsxDEV","_jsxDEV","register","DashboardApp","_s","data","filters","setFilters","endYear","topic","sector","region","pest","source","swot","country","city","resetFilters","setResetFilters","options","responsive","maintainAspectRatio","plugins","legend","position","processedData","filter","item","end_year","parseInt","pestle","chartData","regionCount","topicCount","yearlyMetrics","sectorData","countryData","cityData","swotData","forEach","intensity","sum","count","likelihood","relevance","years","Object","keys","sort","yearlyData","map","year","metricsOverTime","labels","datasets","label","borderColor","tension","regionChart","values","backgroundColor","topicChart","countryChart","entries","a","b","slice","cityChart","sectorChart","swotChart","filterOptions","Set","Boolean","handleFilterChange","filterKey","value","prevFilters","handleResetFilters","prev","className","children","index","onChange","e","target","charAt","toUpperCase","fileName","_jsxFileName","lineNumber","columnNumber","option","onClick","_c","$RefreshReg$"],"sources":["C:/Users/hall_/Desktop/Bid/frontend/src/components/DashboardApp.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\nimport { useData } from '../services/DataContext';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  RadialLinearScale,\r\n} from 'chart.js';\r\nimport { Line, Bar, Pie, Doughnut } from 'react-chartjs-2';\r\n\r\n// Register ChartJS components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  ArcElement,\r\n  RadialLinearScale,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst DashboardApp = () => {\r\n  const { data } = useData();\r\n  const [filters, setFilters] = useState({\r\n    endYear: 'all',\r\n    topic: 'all',\r\n    sector: 'all',\r\n    region: 'all',\r\n    pest: 'all',\r\n    source: 'all',\r\n    swot: 'all',\r\n    country: 'all',\r\n    city: 'all',\r\n  });\r\n  const [resetFilters, setResetFilters] = useState(false);\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n    },\r\n  };\r\n\r\n  // Process and filter data\r\n  const processedData = useMemo(() => {\r\n    return data.filter(item => {\r\n      return (\r\n        (filters.endYear === 'all' || item.end_year === parseInt(filters.endYear)) &&\r\n        (filters.topic === 'all' || item.topic === filters.topic) &&\r\n        (filters.sector === 'all' || item.sector === filters.sector) &&\r\n        (filters.region === 'all' || item.region === filters.region) &&\r\n        (filters.pest === 'all' || item.pestle === filters.pest) &&\r\n        (filters.source === 'all' || item.source === filters.source) &&\r\n        (filters.swot === 'all' || item.swot === filters.swot) &&\r\n        (filters.country === 'all' || item.country === filters.country) &&\r\n        (filters.city === 'all' || item.city === filters.city)\r\n      );\r\n    });\r\n  }, [data, filters]);\r\n\r\n  // Enhanced data aggregation\r\n  const chartData = useMemo(() => {\r\n    const regionCount = {};\r\n    const topicCount = {};\r\n    const yearlyMetrics = {};\r\n    const sectorData = {};\r\n    const countryData = {};\r\n    const cityData = {};\r\n    const swotData = {};\r\n\r\n    processedData.forEach(item => {\r\n      // Region counting\r\n      if (item.region) {\r\n        regionCount[item.region] = (regionCount[item.region] || 0) + 1;\r\n      }\r\n\r\n      // Topic counting\r\n      if (item.topic) {\r\n        topicCount[item.topic] = (topicCount[item.topic] || 0) + 1;\r\n      }\r\n\r\n      // Country counting\r\n      if (item.country) {\r\n        countryData[item.country] = (countryData[item.country] || 0) + 1;\r\n      }\r\n\r\n      // City counting - Ensure city data is being counted\r\n      if (item.city && item.city !== \"\") {\r\n        cityData[item.city] = (cityData[item.city] || 0) + 1;\r\n      }\r\n\r\n      // Sector counting\r\n      if (item.sector) {\r\n        sectorData[item.sector] = (sectorData[item.sector] || 0) + 1;\r\n      }\r\n\r\n      // SWOT counting - Ensure SWOT data is being counted\r\n      if (item.swot && item.swot !== \"\") {\r\n        swotData[item.swot] = (swotData[item.swot] || 0) + 1;\r\n      }\r\n\r\n      // Yearly metrics\r\n      if (item.end_year) {\r\n        if (!yearlyMetrics[item.end_year]) {\r\n          yearlyMetrics[item.end_year] = {\r\n            intensity: { sum: 0, count: 0 },\r\n            likelihood: { sum: 0, count: 0 },\r\n            relevance: { sum: 0, count: 0 }\r\n          };\r\n        }\r\n        if (item.intensity) {\r\n          yearlyMetrics[item.end_year].intensity.sum += item.intensity;\r\n          yearlyMetrics[item.end_year].intensity.count += 1;\r\n        }\r\n        if (item.likelihood) {\r\n          yearlyMetrics[item.end_year].likelihood.sum += item.likelihood;\r\n          yearlyMetrics[item.end_year].likelihood.count += 1;\r\n        }\r\n        if (item.relevance) {\r\n          yearlyMetrics[item.end_year].relevance.sum += item.relevance;\r\n          yearlyMetrics[item.end_year].relevance.count += 1;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Calculate averages for yearly metrics\r\n    const years = Object.keys(yearlyMetrics).sort();\r\n    const yearlyData = {\r\n      intensity: years.map(year => \r\n        yearlyMetrics[year].intensity.count > 0 \r\n          ? yearlyMetrics[year].intensity.sum / yearlyMetrics[year].intensity.count \r\n          : 0\r\n      ),\r\n      likelihood: years.map(year => \r\n        yearlyMetrics[year].likelihood.count > 0 \r\n          ? yearlyMetrics[year].likelihood.sum / yearlyMetrics[year].likelihood.count \r\n          : 0\r\n      ),\r\n      relevance: years.map(year => \r\n        yearlyMetrics[year].relevance.count > 0 \r\n          ? yearlyMetrics[year].relevance.sum / yearlyMetrics[year].relevance.count \r\n          : 0\r\n      )\r\n    };\r\n\r\n    return {\r\n      metricsOverTime: {\r\n        labels: years,\r\n        datasets: [\r\n          {\r\n            label: 'Intensity',\r\n            data: yearlyData.intensity,\r\n            borderColor: 'rgb(75, 192, 192)',\r\n            tension: 0.1,\r\n          },\r\n          {\r\n            label: 'Likelihood',\r\n            data: yearlyData.likelihood,\r\n            borderColor: 'rgb(255, 99, 132)',\r\n            tension: 0.1,\r\n          },\r\n          {\r\n            label: 'Relevance',\r\n            data: yearlyData.relevance,\r\n            borderColor: 'rgb(153, 102, 255)',\r\n            tension: 0.1,\r\n          }\r\n        ],\r\n      },\r\n      regionChart: {\r\n        labels: Object.keys(regionCount),\r\n        datasets: [{\r\n          data: Object.values(regionCount),\r\n          backgroundColor: [\r\n            'rgba(255, 99, 132, 0.8)',\r\n            'rgba(54, 162, 235, 0.8)',\r\n            'rgba(255, 206, 86, 0.8)',\r\n            'rgba(75, 192, 192, 0.8)',\r\n            'rgba(153, 102, 255, 0.8)',\r\n          ],\r\n        }],\r\n      },\r\n      topicChart: {\r\n        labels: Object.keys(topicCount),\r\n        datasets: [{\r\n          label: 'Topics Distribution',\r\n          data: Object.values(topicCount),\r\n          backgroundColor: 'rgba(54, 162, 235, 0.8)',\r\n        }],\r\n      },\r\n      countryChart: {\r\n        labels: Object.entries(countryData)\r\n          .sort((a, b) => b[1] - a[1])\r\n          .slice(0, 10)\r\n          .map(([country]) => country),\r\n        datasets: [{\r\n          label: 'Top 10 Countries',\r\n          data: Object.entries(countryData)\r\n            .sort((a, b) => b[1] - a[1])\r\n            .slice(0, 10)\r\n            .map(([, count]) => count),\r\n          backgroundColor: 'rgba(153, 102, 255, 0.8)',\r\n        }],\r\n      },\r\n      cityChart: {\r\n        labels: Object.entries(cityData)\r\n          .sort((a, b) => b[1] - a[1])\r\n          .slice(0, 10)\r\n          .map(([city]) => city),\r\n        datasets: [{\r\n          label: 'Top 10 Cities',\r\n          data: Object.entries(cityData)\r\n            .sort((a, b) => b[1] - a[1])\r\n            .slice(0, 10)\r\n            .map(([, count]) => count),\r\n          backgroundColor: 'rgba(255, 159, 64, 0.8)',\r\n        }],\r\n      },\r\n      sectorChart: {\r\n        labels: Object.keys(sectorData),\r\n        datasets: [{\r\n          data: Object.values(sectorData),\r\n          backgroundColor: [\r\n            'rgba(255, 99, 132, 0.8)',\r\n            'rgba(54, 162, 235, 0.8)',\r\n            'rgba(255, 206, 86, 0.8)',\r\n            'rgba(75, 192, 192, 0.8)',\r\n            'rgba(153, 102, 255, 0.8)',\r\n          ],\r\n        }],\r\n      },\r\n      swotChart: {\r\n        labels: Object.keys(swotData),\r\n        datasets: [{\r\n          label: 'SWOT Analysis',\r\n          data: Object.values(swotData),\r\n          backgroundColor: [\r\n            'rgba(75, 192, 192, 0.8)',\r\n            'rgba(255, 99, 132, 0.8)',\r\n            'rgba(255, 206, 86, 0.8)',\r\n            'rgba(153, 102, 255, 0.8)',\r\n          ],\r\n        }],\r\n      },\r\n    };\r\n  }, [processedData]);\r\n\r\n  // Filter options\r\n  const filterOptions = useMemo(() => ({\r\n    endYear: [...new Set(data.map(item => item.end_year))].filter(Boolean).sort(),\r\n    topic: [...new Set(data.map(item => item.topic))].filter(Boolean).sort(),\r\n    sector: [...new Set(data.map(item => item.sector))].filter(Boolean).sort(),\r\n    region: [...new Set(data.map(item => item.region))].filter(Boolean).sort(),\r\n    pest: [...new Set(data.map(item => item.pestle))].filter(Boolean).sort(),\r\n    source: [...new Set(data.map(item => item.source))].filter(Boolean).sort(),\r\n    swot: [...new Set(data.map(item => item.swot))].filter(Boolean).sort(),\r\n    country: [...new Set(data.map(item => item.country))].filter(Boolean).sort(),\r\n    city: [...new Set(data.map(item => item.city))].filter(Boolean).sort(),\r\n  }), [data]);\r\n\r\n  const handleFilterChange = (filterKey, value) => {\r\n    setFilters(prevFilters => ({\r\n      ...prevFilters,\r\n      [filterKey]: value,\r\n    }));\r\n  };\r\n\r\n  const handleResetFilters = () => {\r\n    setFilters({\r\n      endYear: 'all',\r\n      topic: 'all',\r\n      sector: 'all',\r\n      region: 'all',\r\n      pest: 'all',\r\n      source: 'all',\r\n      swot: 'all',\r\n      country: 'all',\r\n      city: 'all',\r\n    });\r\n    setResetFilters(prev => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-4 space-y-4\">\r\n      {/* Filters Section */}\r\n      <div className=\"filters flex flex-wrap gap-2\">\r\n        {Object.keys(filterOptions).map((filterKey, index) => (\r\n          <select\r\n            key={index}\r\n            value={filters[filterKey]}\r\n            onChange={e => handleFilterChange(filterKey, e.target.value)}\r\n            className=\"border border-gray-300 rounded p-2\"\r\n          >\r\n            <option value=\"all\">All {filterKey.charAt(0).toUpperCase() + filterKey.slice(1)}</option>\r\n            {filterOptions[filterKey].map(option => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        ))}\r\n        <button onClick={handleResetFilters} className=\"px-4 py-2 bg-blue-500 text-white rounded\">\r\n          Reset Filters\r\n        </button>\r\n      </div>\r\n\r\n      {/* Charts Section */}\r\n      <div className=\"charts grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n        <div className=\"chart-container\">\r\n          <h3 className=\"text-center font-semibold\">Yearly Metrics</h3>\r\n          <Line options={options} data={chartData.metricsOverTime} />\r\n        </div>\r\n        <div className=\"chart-container\">\r\n          <h3 className=\"text-center font-semibold\">Region Distribution</h3>\r\n          <Doughnut options={options} data={chartData.regionChart} />\r\n        </div>\r\n        <div className=\"chart-container\">\r\n          <h3 className=\"text-center font-semibold\">Topic Distribution</h3>\r\n          <Bar options={options} data={chartData.topicChart} />\r\n        </div>\r\n        <div className=\"chart-container\">\r\n          <h3 className=\"text-center font-semibold\">Top 10 Countries</h3>\r\n          <Pie options={options} data={chartData.countryChart} />\r\n        </div>\r\n        <div className=\"chart-container\">\r\n          <h3 className=\"text-center font-semibold\">Top 10 Cities</h3>\r\n          <Pie options={options} data={chartData.cityChart} />\r\n        </div>\r\n        <div className=\"chart-container\">\r\n          <h3 className=\"text-center font-semibold\">Sector Distribution</h3>\r\n          <Bar options={options} data={chartData.sectorChart} />\r\n        </div>\r\n        <div className=\"chart-container\">\r\n          <h3 className=\"text-center font-semibold\">SWOT Analysis</h3>\r\n          <Doughnut options={options} data={chartData.swotChart} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardApp;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}