{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hall_\\\\Desktop\\\\Bid\\\\frontend\\\\src\\\\components\\\\DashboardApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport { useData } from '../services/DataContext';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend, RadialLinearScale } from 'chart.js';\nimport { Line, Bar, Pie, Doughnut } from 'react-chartjs-2';\n\n// Register ChartJS components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, RadialLinearScale, Title, Tooltip, Legend);\nconst DashboardApp = () => {\n  _s();\n  const {\n    data,\n    filters,\n    setFilters\n  } = useData();\n  const [resetFilters, setResetFilters] = useState(false);\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top'\n      }\n    }\n  };\n\n  // Enhanced data aggregation\n  const chartData = useMemo(() => {\n    const regionCount = {};\n    const topicCount = {};\n    const yearlyMetrics = {};\n    const sectorData = {};\n    const countryData = {};\n    const cityData = {};\n    const swotData = {};\n    const likelihoodByTopic = {};\n    const relevanceByRegion = {};\n    data.forEach(item => {\n      if (item.region) regionCount[item.region] = (regionCount[item.region] || 0) + 1;\n      if (item.topic) topicCount[item.topic] = (topicCount[item.topic] || 0) + 1;\n      if (item.country) countryData[item.country] = (countryData[item.country] || 0) + 1;\n      if (item.city) cityData[item.city] = (cityData[item.city] || 0) + 1;\n      if (item.sector) sectorData[item.sector] = (sectorData[item.sector] || 0) + 1;\n      if (item.swot) swotData[item.swot] = (swotData[item.swot] || 0) + 1;\n      if (item.year) {\n        if (!yearlyMetrics[item.year]) {\n          yearlyMetrics[item.year] = {\n            intensity: {\n              sum: 0,\n              count: 0\n            },\n            likelihood: {\n              sum: 0,\n              count: 0\n            },\n            relevance: {\n              sum: 0,\n              count: 0\n            }\n          };\n        }\n        if (item.intensity) {\n          yearlyMetrics[item.year].intensity.sum += item.intensity;\n          yearlyMetrics[item.year].intensity.count += 1;\n        }\n        if (item.likelihood) {\n          yearlyMetrics[item.year].likelihood.sum += item.likelihood;\n          yearlyMetrics[item.year].likelihood.count += 1;\n        }\n        if (item.relevance) {\n          yearlyMetrics[item.year].relevance.sum += item.relevance;\n          yearlyMetrics[item.year].relevance.count += 1;\n        }\n      }\n      if (item.topic && item.likelihood) {\n        if (!likelihoodByTopic[item.topic]) {\n          likelihoodByTopic[item.topic] = {\n            sum: 0,\n            count: 0\n          };\n        }\n        likelihoodByTopic[item.topic].sum += item.likelihood;\n        likelihoodByTopic[item.topic].count += 1;\n      }\n      if (item.region && item.relevance) {\n        if (!relevanceByRegion[item.region]) {\n          relevanceByRegion[item.region] = {\n            sum: 0,\n            count: 0\n          };\n        }\n        relevanceByRegion[item.region].sum += item.relevance;\n        relevanceByRegion[item.region].count += 1;\n      }\n    });\n\n    // Calculate averages\n    const years = Object.keys(yearlyMetrics);\n    const yearlyData = {\n      intensity: years.map(year => yearlyMetrics[year].intensity.sum / yearlyMetrics[year].intensity.count),\n      likelihood: years.map(year => yearlyMetrics[year].likelihood.sum / yearlyMetrics[year].likelihood.count),\n      relevance: years.map(year => yearlyMetrics[year].relevance.sum / yearlyMetrics[year].relevance.count)\n    };\n    return {\n      metricsOverTime: {\n        labels: years,\n        datasets: [{\n          label: 'Intensity',\n          data: yearlyData.intensity,\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1\n        }, {\n          label: 'Likelihood',\n          data: yearlyData.likelihood,\n          borderColor: 'rgb(255, 99, 132)',\n          tension: 0.1\n        }, {\n          label: 'Relevance',\n          data: yearlyData.relevance,\n          borderColor: 'rgb(153, 102, 255)',\n          tension: 0.1\n        }]\n      },\n      regionChart: {\n        labels: Object.keys(regionCount),\n        datasets: [{\n          data: Object.values(regionCount),\n          backgroundColor: ['rgba(255, 99, 132, 0.8)', 'rgba(54, 162, 235, 0.8)', 'rgba(255, 206, 86, 0.8)', 'rgba(75, 192, 192, 0.8)', 'rgba(153, 102, 255, 0.8)']\n        }]\n      },\n      topicChart: {\n        labels: Object.keys(topicCount),\n        datasets: [{\n          label: 'Topics Distribution',\n          data: Object.values(topicCount),\n          backgroundColor: 'rgba(54, 162, 235, 0.8)'\n        }]\n      },\n      countryChart: {\n        labels: Object.keys(countryData).slice(0, 10),\n        datasets: [{\n          label: 'Top 10 Countries',\n          data: Object.values(countryData).slice(0, 10),\n          backgroundColor: 'rgba(153, 102, 255, 0.8)'\n        }]\n      },\n      cityChart: {\n        labels: Object.keys(cityData).slice(0, 10),\n        datasets: [{\n          label: 'Top 10 Cities',\n          data: Object.values(cityData).slice(0, 10),\n          backgroundColor: 'rgba(255, 159, 64, 0.8)'\n        }]\n      },\n      sectorChart: {\n        labels: Object.keys(sectorData),\n        datasets: [{\n          data: Object.values(sectorData),\n          backgroundColor: ['rgba(255, 99, 132, 0.8)', 'rgba(54, 162, 235, 0.8)', 'rgba(255, 206, 86, 0.8)', 'rgba(75, 192, 192, 0.8)', 'rgba(153, 102, 255, 0.8)']\n        }]\n      },\n      swotChart: {\n        labels: Object.keys(swotData),\n        datasets: [{\n          label: 'SWOT Distribution',\n          data: Object.values(swotData),\n          backgroundColor: ['rgba(255, 99, 132, 0.8)', 'rgba(54, 162, 235, 0.8)', 'rgba(255, 206, 86, 0.8)', 'rgba(75, 192, 192, 0.8)']\n        }]\n      }\n    };\n  }, [data, filters, resetFilters]);\n\n  // Enhanced filter options\n  const filterOptions = useMemo(() => ({\n    endYear: [...new Set(data.map(item => item.end_year))].filter(Boolean).sort(),\n    topics: [...new Set(data.map(item => item.topic))].filter(Boolean).sort(),\n    regions: [...new Set(data.map(item => item.region))].filter(Boolean).sort(),\n    pest: [...new Set(data.map(item => item.pestle))].filter(Boolean).sort(),\n    sources: [...new Set(data.map(item => item.source))].filter(Boolean).sort(),\n    swot: [...new Set(data.map(item => item.swot))].filter(Boolean).sort(),\n    countries: [...new Set(data.map(item => item.country))].filter(Boolean).sort(),\n    cities: [...new Set(data.map(item => item.city))].filter(Boolean).sort(),\n    sectors: [...new Set(data.map(item => item.sector))].filter(Boolean).sort()\n  }), [data, resetFilters]);\n  const handleFilterChange = (e, filterType) => {\n    setFilters(prev => ({\n      ...prev,\n      [filterType]: e.target.value\n    }));\n  };\n  const handleReset = () => {\n    setFilters({\n      endYear: 'all',\n      topic: 'all',\n      sector: 'all',\n      region: 'all',\n      pest: 'all',\n      source: 'all',\n      swot: 'all',\n      country: 'all',\n      city: 'all'\n    });\n    setResetFilters(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"p-2 border rounded\",\n        value: filters.swot,\n        onChange: e => handleFilterChange(e, 'swot'),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"all\",\n          children: \"All SWOT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), filterOptions.swot.map(swot => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: swot,\n          children: swot\n        }, swot, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"p-2 border rounded\",\n        value: filters.city,\n        onChange: e => handleFilterChange(e, 'city'),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"all\",\n          children: \"All Cities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), filterOptions.cities.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: city,\n          children: city\n        }, city, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"p-2 border rounded bg-blue-500 text-white hover:bg-blue-600\",\n        onClick: handleReset,\n        children: \"Reset Filters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 lg:grid-cols-2 gap-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded-lg shadow\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold mb-4\",\n          children: \"SWOT Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-80\",\n          children: /*#__PURE__*/_jsxDEV(Pie, {\n            options: options,\n            data: chartData.swotChart\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n_s(DashboardApp, \"B5M1fZdY8LPoe/4LRIQEt6DBo+4=\", false, function () {\n  return [useData];\n});\n_c = DashboardApp;\nexport default DashboardApp;\nvar _c;\n$RefreshReg$(_c, \"DashboardApp\");","map":{"version":3,"names":["React","useState","useMemo","useData","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","RadialLinearScale","Line","Bar","Pie","Doughnut","jsxDEV","_jsxDEV","register","DashboardApp","_s","data","filters","setFilters","resetFilters","setResetFilters","options","responsive","maintainAspectRatio","plugins","legend","position","chartData","regionCount","topicCount","yearlyMetrics","sectorData","countryData","cityData","swotData","likelihoodByTopic","relevanceByRegion","forEach","item","region","topic","country","city","sector","swot","year","intensity","sum","count","likelihood","relevance","years","Object","keys","yearlyData","map","metricsOverTime","labels","datasets","label","borderColor","tension","regionChart","values","backgroundColor","topicChart","countryChart","slice","cityChart","sectorChart","swotChart","filterOptions","endYear","Set","end_year","filter","Boolean","sort","topics","regions","pest","pestle","sources","source","countries","cities","sectors","handleFilterChange","e","filterType","prev","target","value","handleReset","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/hall_/Desktop/Bid/frontend/src/components/DashboardApp.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\nimport { useData } from '../services/DataContext';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  RadialLinearScale,\r\n} from 'chart.js';\r\nimport { Line, Bar, Pie, Doughnut } from 'react-chartjs-2';\r\n\r\n// Register ChartJS components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  ArcElement,\r\n  RadialLinearScale,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst DashboardApp = () => {\r\n  const { data, filters, setFilters } = useData();\r\n  const [resetFilters, setResetFilters] = useState(false);\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n    },\r\n  };\r\n\r\n  // Enhanced data aggregation\r\n  const chartData = useMemo(() => {\r\n    const regionCount = {};\r\n    const topicCount = {};\r\n    const yearlyMetrics = {};\r\n    const sectorData = {};\r\n    const countryData = {};\r\n    const cityData = {};\r\n    const swotData = {};\r\n    const likelihoodByTopic = {};\r\n    const relevanceByRegion = {};\r\n\r\n    data.forEach(item => {\r\n      if (item.region) regionCount[item.region] = (regionCount[item.region] || 0) + 1;\r\n      if (item.topic) topicCount[item.topic] = (topicCount[item.topic] || 0) + 1;\r\n      if (item.country) countryData[item.country] = (countryData[item.country] || 0) + 1;\r\n      if (item.city) cityData[item.city] = (cityData[item.city] || 0) + 1;\r\n      if (item.sector) sectorData[item.sector] = (sectorData[item.sector] || 0) + 1;\r\n      if (item.swot) swotData[item.swot] = (swotData[item.swot] || 0) + 1;\r\n      \r\n      if (item.year) {\r\n        if (!yearlyMetrics[item.year]) {\r\n          yearlyMetrics[item.year] = {\r\n            intensity: { sum: 0, count: 0 },\r\n            likelihood: { sum: 0, count: 0 },\r\n            relevance: { sum: 0, count: 0 }\r\n          };\r\n        }\r\n        if (item.intensity) {\r\n          yearlyMetrics[item.year].intensity.sum += item.intensity;\r\n          yearlyMetrics[item.year].intensity.count += 1;\r\n        }\r\n        if (item.likelihood) {\r\n          yearlyMetrics[item.year].likelihood.sum += item.likelihood;\r\n          yearlyMetrics[item.year].likelihood.count += 1;\r\n        }\r\n        if (item.relevance) {\r\n          yearlyMetrics[item.year].relevance.sum += item.relevance;\r\n          yearlyMetrics[item.year].relevance.count += 1;\r\n        }\r\n      }\r\n\r\n      if (item.topic && item.likelihood) {\r\n        if (!likelihoodByTopic[item.topic]) {\r\n          likelihoodByTopic[item.topic] = { sum: 0, count: 0 };\r\n        }\r\n        likelihoodByTopic[item.topic].sum += item.likelihood;\r\n        likelihoodByTopic[item.topic].count += 1;\r\n      }\r\n\r\n      if (item.region && item.relevance) {\r\n        if (!relevanceByRegion[item.region]) {\r\n          relevanceByRegion[item.region] = { sum: 0, count: 0 };\r\n        }\r\n        relevanceByRegion[item.region].sum += item.relevance;\r\n        relevanceByRegion[item.region].count += 1;\r\n      }\r\n    });\r\n\r\n    // Calculate averages\r\n    const years = Object.keys(yearlyMetrics);\r\n    const yearlyData = {\r\n      intensity: years.map(year => yearlyMetrics[year].intensity.sum / yearlyMetrics[year].intensity.count),\r\n      likelihood: years.map(year => yearlyMetrics[year].likelihood.sum / yearlyMetrics[year].likelihood.count),\r\n      relevance: years.map(year => yearlyMetrics[year].relevance.sum / yearlyMetrics[year].relevance.count)\r\n    };\r\n\r\n    return {\r\n      metricsOverTime: {\r\n        labels: years,\r\n        datasets: [\r\n          {\r\n            label: 'Intensity',\r\n            data: yearlyData.intensity,\r\n            borderColor: 'rgb(75, 192, 192)',\r\n            tension: 0.1,\r\n          },\r\n          {\r\n            label: 'Likelihood',\r\n            data: yearlyData.likelihood,\r\n            borderColor: 'rgb(255, 99, 132)',\r\n            tension: 0.1,\r\n          },\r\n          {\r\n            label: 'Relevance',\r\n            data: yearlyData.relevance,\r\n            borderColor: 'rgb(153, 102, 255)',\r\n            tension: 0.1,\r\n          }\r\n        ],\r\n      },\r\n      regionChart: {\r\n        labels: Object.keys(regionCount),\r\n        datasets: [{\r\n          data: Object.values(regionCount),\r\n          backgroundColor: [\r\n            'rgba(255, 99, 132, 0.8)',\r\n            'rgba(54, 162, 235, 0.8)',\r\n            'rgba(255, 206, 86, 0.8)',\r\n            'rgba(75, 192, 192, 0.8)',\r\n            'rgba(153, 102, 255, 0.8)',\r\n          ],\r\n        }],\r\n      },\r\n      topicChart: {\r\n        labels: Object.keys(topicCount),\r\n        datasets: [{\r\n          label: 'Topics Distribution',\r\n          data: Object.values(topicCount),\r\n          backgroundColor: 'rgba(54, 162, 235, 0.8)',\r\n        }],\r\n      },\r\n      countryChart: {\r\n        labels: Object.keys(countryData).slice(0, 10),\r\n        datasets: [{\r\n          label: 'Top 10 Countries',\r\n          data: Object.values(countryData).slice(0, 10),\r\n          backgroundColor: 'rgba(153, 102, 255, 0.8)',\r\n        }],\r\n      },\r\n      cityChart: {\r\n        labels: Object.keys(cityData).slice(0, 10),\r\n        datasets: [{\r\n          label: 'Top 10 Cities',\r\n          data: Object.values(cityData).slice(0, 10),\r\n          backgroundColor: 'rgba(255, 159, 64, 0.8)',\r\n        }],\r\n      },\r\n      sectorChart: {\r\n        labels: Object.keys(sectorData),\r\n        datasets: [{\r\n          data: Object.values(sectorData),\r\n          backgroundColor: [\r\n            'rgba(255, 99, 132, 0.8)',\r\n            'rgba(54, 162, 235, 0.8)',\r\n            'rgba(255, 206, 86, 0.8)',\r\n            'rgba(75, 192, 192, 0.8)',\r\n            'rgba(153, 102, 255, 0.8)',\r\n          ],\r\n        }],\r\n      },\r\n      swotChart: {\r\n        labels: Object.keys(swotData),\r\n        datasets: [{\r\n          label: 'SWOT Distribution',\r\n          data: Object.values(swotData),\r\n          backgroundColor: [\r\n            'rgba(255, 99, 132, 0.8)',\r\n            'rgba(54, 162, 235, 0.8)',\r\n            'rgba(255, 206, 86, 0.8)',\r\n            'rgba(75, 192, 192, 0.8)',\r\n          ],\r\n        }],\r\n      },\r\n    };\r\n  }, [data, filters, resetFilters]);\r\n\r\n  // Enhanced filter options\r\n  const filterOptions = useMemo(() => ({\r\n    endYear: [...new Set(data.map(item => item.end_year))].filter(Boolean).sort(),\r\n    topics: [...new Set(data.map(item => item.topic))].filter(Boolean).sort(),\r\n    regions: [...new Set(data.map(item => item.region))].filter(Boolean).sort(),\r\n    pest: [...new Set(data.map(item => item.pestle))].filter(Boolean).sort(),\r\n    sources: [...new Set(data.map(item => item.source))].filter(Boolean).sort(),\r\n    swot: [...new Set(data.map(item => item.swot))].filter(Boolean).sort(),\r\n    countries: [...new Set(data.map(item => item.country))].filter(Boolean).sort(),\r\n    cities: [...new Set(data.map(item => item.city))].filter(Boolean).sort(),\r\n    sectors: [...new Set(data.map(item => item.sector))].filter(Boolean).sort(),\r\n  }), [data, resetFilters]);\r\n\r\n  const handleFilterChange = (e, filterType) => {\r\n    setFilters(prev => ({\r\n      ...prev,\r\n      [filterType]: e.target.value\r\n    }));\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setFilters({\r\n      endYear: 'all',\r\n      topic: 'all',\r\n      sector: 'all',\r\n      region: 'all',\r\n      pest: 'all',\r\n      source: 'all',\r\n      swot: 'all',\r\n      country: 'all',\r\n      city: 'all',\r\n    });\r\n    setResetFilters(prev => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      {/* Enhanced Filters Section */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        {/* ... (existing filter elements) */}\r\n\r\n        <select\r\n          className=\"p-2 border rounded\"\r\n          value={filters.swot}\r\n          onChange={(e) => handleFilterChange(e, 'swot')}\r\n        >\r\n          <option value=\"all\">All SWOT</option>\r\n          {filterOptions.swot.map(swot => (\r\n            <option key={swot} value={swot}>{swot}</option>\r\n          ))}\r\n        </select>\r\n\r\n        <select\r\n          className=\"p-2 border rounded\"\r\n          value={filters.city}\r\n          onChange={(e) => handleFilterChange(e, 'city')}\r\n        >\r\n          <option value=\"all\">All Cities</option>\r\n          {filterOptions.cities.map(city => (\r\n            <option key={city} value={city}>{city}</option>\r\n          ))}\r\n        </select>\r\n\r\n        <button\r\n          className=\"p-2 border rounded bg-blue-500 text-white hover:bg-blue-600\"\r\n          onClick={handleReset}\r\n        >\r\n          Reset Filters\r\n        </button>\r\n      </div>\r\n\r\n      {/* Enhanced Charts Section */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        {/* ... (existing chart elements) */}\r\n\r\n        <div className=\"bg-white p-4 rounded-lg shadow\">\r\n          <h2 className=\"text-lg font-semibold mb-4\">SWOT Distribution</h2>\r\n          <div className=\"h-80\">\r\n            <Pie options={options} data={chartData.swotChart} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardApp;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}