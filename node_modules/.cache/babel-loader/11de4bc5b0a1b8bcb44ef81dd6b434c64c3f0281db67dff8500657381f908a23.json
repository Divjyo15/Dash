{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hall_\\\\Desktop\\\\Bid\\\\frontend\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/Dashboard.js\nimport React, { useState, useEffect } from 'react';\nimport { fetchData } from '../services/api';\nimport Chart from './ChartCard'; // This component renders each chart\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const result = await fetchData(); // Fetches data from backend\n        setData(result);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error loading data:', error);\n        setLoading(false);\n      }\n    };\n    loadData();\n  }, []);\n\n  // Prepare chart data (for example, by \"intensity\" field)\n  const chartData = {\n    labels: data.map(item => item.title),\n    // x-axis labels\n    datasets: [{\n      label: 'Intensity',\n      data: data.map(item => item.intensity),\n      // y-axis data\n      backgroundColor: 'rgba(75, 192, 192, 0.6)',\n      borderColor: 'rgba(75, 192, 192, 1)',\n      borderWidth: 1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Data Visualization Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(ChartCard, {\n      chartData: chartData,\n      chartType: \"bar\" // Bar chart type\n      ,\n      title: \"Intensity by Title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"YP7e7Smzxlgf2d3MqLcgRZjo83U=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","fetchData","Chart","jsxDEV","_jsxDEV","Dashboard","_s","data","setData","loading","setLoading","loadData","result","error","console","chartData","labels","map","item","title","datasets","label","intensity","backgroundColor","borderColor","borderWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","ChartCard","chartType","_c","$RefreshReg$"],"sources":["C:/Users/hall_/Desktop/Bid/frontend/src/components/Dashboard.js"],"sourcesContent":["// frontend/src/components/Dashboard.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { fetchData } from '../services/api';\r\nimport Chart from './ChartCard'; // This component renders each chart\r\n\r\nconst Dashboard = () => {\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const loadData = async () => {\r\n            try {\r\n                const result = await fetchData(); // Fetches data from backend\r\n                setData(result);\r\n                setLoading(false);\r\n            } catch (error) {\r\n                console.error('Error loading data:', error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n        loadData();\r\n    }, []);\r\n\r\n    // Prepare chart data (for example, by \"intensity\" field)\r\n    const chartData = {\r\n        labels: data.map(item => item.title), // x-axis labels\r\n        datasets: [\r\n            {\r\n                label: 'Intensity',\r\n                data: data.map(item => item.intensity), // y-axis data\r\n                backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n                borderColor: 'rgba(75, 192, 192, 1)',\r\n                borderWidth: 1,\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Data Visualization Dashboard</h2>\r\n            {loading ? (\r\n                <p>Loading...</p>\r\n            ) : (\r\n                <ChartCard\r\n                    chartData={chartData}\r\n                    chartType=\"bar\" // Bar chart type\r\n                    title=\"Intensity by Title\"\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,OAAOC,KAAK,MAAM,aAAa,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACZ,MAAMW,QAAQ,GAAG,MAAAA,CAAA,KAAY;MACzB,IAAI;QACA,MAAMC,MAAM,GAAG,MAAMX,SAAS,CAAC,CAAC,CAAC,CAAC;QAClCO,OAAO,CAACI,MAAM,CAAC;QACfF,UAAU,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3CH,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IACDC,QAAQ,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMI,SAAS,GAAG;IACdC,MAAM,EAAET,IAAI,CAACU,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,CAAC;IAAE;IACtCC,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,WAAW;MAClBd,IAAI,EAAEA,IAAI,CAACU,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACI,SAAS,CAAC;MAAE;MACxCC,eAAe,EAAE,yBAAyB;MAC1CC,WAAW,EAAE,uBAAuB;MACpCC,WAAW,EAAE;IACjB,CAAC;EAET,CAAC;EAED,oBACIrB,OAAA;IAAAsB,QAAA,gBACItB,OAAA;MAAAsB,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACpCrB,OAAO,gBACJL,OAAA;MAAAsB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEjB1B,OAAA,CAAC2B,SAAS;MACNhB,SAAS,EAAEA,SAAU;MACrBiB,SAAS,EAAC,KAAK,CAAC;MAAA;MAChBb,KAAK,EAAC;IAAoB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACxB,EAAA,CA9CID,SAAS;AAAA4B,EAAA,GAAT5B,SAAS;AAgDf,eAAeA,SAAS;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}